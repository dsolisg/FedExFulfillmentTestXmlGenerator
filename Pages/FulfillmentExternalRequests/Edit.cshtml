@page "{id:int?}"
@model FulfillmentTestXmlGenerator.Pages.FulfillmentExternalRequests.EditModel

<h1>Edit FulfillmentExternalRequest (@Model.Id)</h1>

<form method="post" id="editForm">
    <div class="mb-3">
        <label class="form-label">Edit JSON (structured editor)</label>

        <!-- JSONEditor will render here -->
        <div id="jsoneditor" style="height:600px;border:1px solid #ccc;"></div>

        <!-- Hidden field posts the edited JSON back to the server -->
        <textarea asp-for="JsonPayload" id="JsonPayload" class="d-none"></textarea>

        <span asp-validation-for="JsonPayload" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <a asp-page="./Index" class="btn btn-secondary">Cancel</a>
</form>

<link href="https://cdn.jsdelivr.net/npm/jsoneditor@9.13.0/dist/jsoneditor.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/jsoneditor@9.13.0/dist/jsoneditor.min.js"></script>

<script>
    (function () {
        const container = document.getElementById('jsoneditor');

        // modes: tree provides generated input controls; form gives form-based editor as alternative
        const options = {
            mode: 'tree',
            modes: ['tree', 'form', 'text', 'view'],
            indentation: 2,
            onError: function (err) { console.error(err.toString()); }
        };

        const initial = @Html.Raw(string.IsNullOrWhiteSpace(Model.JsonPayload) ? "{}" : Model.JsonPayload);
        try {
            editor.set(JSON.parse(initial));
        } catch (e) {
            // fallback: set as empty object and show error in console
            console.error('Failed to load JSON into editor:', e);
            editor.set({});
        }

        // On submit, copy editor contents to hidden textarea so it posts back
        document.getElementById('editForm').addEventListener('submit', function (evt) {
            try {
                const json = editor.get();
                document.getElementById('JsonPayload').value = JSON.stringify(json, null, 2);
            } catch (e) {
                // If editor cannot produce valid JSON, prevent submit and show alert
                evt.preventDefault();
                alert('Editor contains invalid JSON; fix errors before saving.');
            }
        });
    })();
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}